(()=>{"use strict";var e,t,o;!function(e){e.DOG="Dog",e.CAT="Cat",e.PARROT="Parrot"}(e||(e={})),function(e){e.MAMMAL="Mammal",e.BIRD="Bird",e.REPTILE="Reptile",e.AMPHIBIAN="Amphibian",e.FISH="Fish"}(t||(t={})),function(e){e.MALE="Male",e.FEMALE="Female"}(o||(o={}));class n{constructor(e,t,o,n){this.name=e,this.age=t,this.gender=o,this.amountMoney=n}buyPet(e,t,o){this.amountMoney>0&&this.amountMoney>=o&&e>0?console.log("I have bought a "+t.petType):console.log("I am not buying a pet")}getMoney(){return this.amountMoney}setMoney(e){this.amountMoney=e}}class a{constructor(e,t,o,n,a){this.name=e,this.age=t,this.breed=o,this.petType=n,this.classification=a}careForOwner(){}eat(){console.log("yum! yum! ")}sleep(){console.log("zzz....")}}class s{constructor(e,t,o,n){this.name=e,this.age=t,this.breed=o,this.petType=n}careForOwner(){}}class i{constructor(e,t,o,n){this.name=e,this.age=t,this.breed=o,this.petType=n}careForOwner(){}}let c=new class{constructor(){this.pets=[]}addPet(e){this.pets.push(e)}viewPets(){console.log(this.pets)}};const l=new s("Stevie",1,"Coltriever",e.DOG),r=new s("Marley",2,"Beagle",e.DOG),h=new s("Dasha",4,"Street dog",e.DOG),M=new a("Money",3,"Street cat",e.CAT,t.MAMMAL),d=new a("Letty",5,"American Ringtail",e.CAT,t.MAMMAL),m=new i("Dundee",33,"Yellow-headed",e.PARROT),u=(new class{constructor(e,t,o){this.name=e,this.age=t,this.classification=o}makeNoise(){console.log("@#$%")}sleep(){console.log("zzzz")}eat(){console.log("chum! chum!")}}("Vince",1,t.MAMMAL),new n("Jay",26,o.MALE,5e3));var g;new n("Roberto",98,o.MALE,2e6),new n("Roberta",26,o.FEMALE,300),c.addPet(l),c.addPet(r),c.addPet(h),c.addPet(M),c.addPet(d),c.addPet(m),c.viewPets(),(g=l)instanceof a?console.log("We have a cat named: "+g.name):g instanceof s?console.log("We have a dog named: "+g.name):g instanceof i&&console.log("We have a parrot named: "+g.name),u.buyPet(1,l,100)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,